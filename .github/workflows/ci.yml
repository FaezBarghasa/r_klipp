# Continuous Integration workflow for the r_klipp Rust workspace.
#
# This workflow performs the following checks:
# 1. Formatting (rustfmt): Ensures all code adheres to style guidelines.
# 2. Linting (clippy): Catches common mistakes and improves code quality.
# 3. Testing: Runs all unit and integration tests across the workspace.
# 4. Firmware Build: Verifies that the embedded firmware binary compiles for the ARM target.
# 5. Fuzzing (Optional): Includes a commented-out section for running fuzz tests.

name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  fmt_and_clippy:
    name: Formatting & Lints
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Run Clippy
        run: cargo clippy --workspace -- -D warnings

  test_suite:
    name: Run Test Suite
    needs: fmt_and_clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Run tests
        run: cargo test --workspace

  build_firmware:
    name: Build Firmware for ARM Target
    needs: fmt_and_clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv7em-none-eabihf
      - name: Build klipper-mcu-firmware
        run: cargo build --release -p klipper-mcu-firmware --target thumbv7em-none-eabihf

  # Fuzzing can be time-consuming, so it's often run on a schedule or manually.
  # This job is commented out but can be enabled as needed.
  # fuzz:
  #   name: Fuzz Protocol Parser
  #   needs: fmt_and_clippy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install Rust toolchain
  #       uses: dtolnay/rust-toolchain@stable
  #     - name: Install cargo-fuzz
  #       run: cargo install cargo-fuzz
  #     - name: Run fuzzer for 60 seconds
  #       run: cd tests/fuzz && cargo fuzz run protocol_parser -- -max_total_time=60s
