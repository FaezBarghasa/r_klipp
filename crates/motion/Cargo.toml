[package]
name = "motion"
version = "0.1.0"
edition = "2021"
authors = ["Your Name <you@example.com>"]
description = "A deterministic motion planner and kinematics library for host and MCU."
license = "MIT OR Apache-2.0"
repository = "https://github.com/your-username/motion"
keywords = ["motion-control", "kinematics", "no_std", "robotics", "cnc"]
categories = ["embedded", "no-std", "science::robotics"]

[dependencies]
# Use libm for f32 math in no_std environments
libm = { version = "0.2.8", optional = true }
# Optional serde support for serialization
serde = { version = "1.0", features = ["derive"], optional = true }
# For the command queue
heapless = "0.8.0"
# For the StepCommand definition from the stepper driver
mcu-drivers = { path = "../mcu-drivers", package = "stepper" }


[features]
default = ["std"]
# The `std` feature enables functionality that requires the standard library,
# such as host-based simulations and certain math functions not in libm.
std = []
# The `alloc` feature enables use of the heap, primarily for collecting step
# sequences into a Vec. Required for most no_std use cases.
alloc = []
# The `serde` feature enables serialization/deserialization for types like
# StepEvent, useful for tracing and simulation.
serde-support = ["serde"]

[dev-dependencies]
# For running benchmarks
criterion = "0.5"
# For serializing traces in examples/tests
serde_json = "1.0"

[[bench]]
name = "planner_benchmark"
harness = false
